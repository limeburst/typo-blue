generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  sessions      Session[]
  blogs         Blog[]
  follows       Follow[]
  guestbook     Guestbook[]
}

model EmailVerificationChallenge {
  id        String   @id @default(uuid()) @db.Uuid
  code      String
  email     String
  expiresAt DateTime
}

model Post {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  uuid        String    @unique @default(uuid()) @db.Uuid
  title       String?
  content     String
  blogId      Int
  blog        Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model Blog {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  slug         String      @unique
  name         String?
  description  String?
  userId       Int
  privateKey   String?
  publicKey    String?
  visitorCount Int         @default(0)
  posts        Post[]
  user         User        @relation(fields: [userId], references: [id])
  guestbook    Guestbook[]
}

model Guestbook {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  repliedAt DateTime?
  content   String
  reply     String?
  authorId  Int
  blogId    Int
  author    User      @relation(fields: [authorId], references: [id])
  blog      Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model Follow {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  accountId       Int
  targetAccountId String
  follow          User     @relation(fields: [accountId], references: [id])

  @@unique([accountId, targetAccountId])
}
