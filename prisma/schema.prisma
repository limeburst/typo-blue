generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime @db.Timestamptz
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int         @id @default(autoincrement())
  name          String?
  email         String      @unique
  emailVerified DateTime?   @db.Timestamptz
  passwordHash  String?
  image         String?
  createdAt     DateTime    @default(now()) @db.Timestamptz
  updatedAt     DateTime    @updatedAt @db.Timestamptz
  sessions      Session[]
  blog          Blog?
  guestbook     Guestbook[]
}

model EmailVerificationChallenge {
  id        String   @id @default(uuid()) @db.Uuid
  code      String
  email     String
  expiresAt DateTime @db.Timestamptz
}

model Post {
  uuid        String    @id @default(uuid()) @db.Uuid
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz
  publishedAt DateTime? @db.Timestamptz
  deletedAt   DateTime? @db.Timestamptz
  title       String?
  content     String?
  blogId      Int
  blog        Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model Blog {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now()) @db.Timestamptz
  updatedAt    DateTime    @updatedAt @db.Timestamptz
  slug         String      @unique
  name         String?
  description  String?
  userId       Int         @unique
  visitorCount Int         @default(0)
  discoverable Boolean     @default(false)
  posts        Post[]
  user         User        @relation(fields: [userId], references: [id])
  guestbook    Guestbook[]
  followers    Follow[]    @relation("Following")
  followings   Follow[]    @relation("Follower")
}

model Guestbook {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamptz
  repliedAt DateTime? @db.Timestamptz
  content   String
  reply     String?
  authorId  Int
  blogId    Int
  author    User      @relation(fields: [authorId], references: [id])
  blog      Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz
  followerId  Int
  followingId Int
  follower    Blog     @relation("Follower", fields: [followerId], references: [id])
  following   Blog     @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}
